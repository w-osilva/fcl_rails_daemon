#!/usr/bin/env ruby
require 'fileutils'
require 'fcl_rails_daemon/config'

base = DAEMON_ROOT
config_dir = File.join(base, DAEMON_CONFIG['config_path'])
FileUtils.mkdir_p(config_dir) unless File.directory?(config_dir)
config_file = File.join(config_dir, 'config.rb')
commands_file = File.join(config_dir, 'commands.rb')

if ARGV.include? "--configure"
  config_file_content = <<-FILE
# FCL RAILS DAEMON
#
# Creator: Washington Silva
# Contact w-osilva@hotmail.com

# Load environment file (rails project)
env_file = File.join(File.dirname(__dir__), "environment.rb")
raise " ༼ つ ◕_◕ ༽つ OOOPS... Could not find the environment file.    " unless File.exist? env_file
require env_file

# Load commands files
command_dir = File.join(DAEMON_ROOT, DAEMON_CONFIG['command_path'])
raise " ༼ つ ◕_◕ ༽つ OOOPS... Could not find the command directory. Run 'fcld --configure'   " unless File.directory? command_dir
Dir[File.join(command_dir, "**/*.rb")].each {|file| require file }

# Load commands registered
require_relative 'commands.rb'
  FILE

  File.open(config_file, 'wb') {|f| f.write(config_file_content) } unless File.exist?(config_file)

  commands_file_content = <<-FILE
# To register commands use the FclRailsDaemon::Recorder class
#  :command is the command name
#  :class_reference is the class to which it is
#
# FclRailsDaemon::Recorder.add(command: 'command_sample', class_reference: CommandSample)

  FILE

  File.open(commands_file, 'wb') {|f| f.write(commands_file_content) } unless File.exist?(commands_file)

  command_sample_content = <<-FILE
class CommandSample < FclRailsDaemon::Daemon

  # Is necessary to implement the method "initialize"
  def initialize
    # Set the parameter "command" (name that will be referenced in the command entered in the terminal)
    # The parameter "log" is optional but suggest it is set a log for each command to prevent many commands write on deafult log (if you have many commands in your application)
    super(command: "command_sample", log: "log/command_sample.log")
  end

  # Is necessary to implement the method "self.help"
  def self.help
    # Should return a hash with " description" and "example"
    {
      description: "This command is a sample - Run every 1 minute",
      sample: ["--command command_sample |start|stop|restart|status|"]
    }
  end

  # Is necessary to implement the method "run"
  def run
    # Call the run method of the parent class (super) through a block that will contain your code
    super do
      # If you want your command be running repeatedly put inside a loop
        @counter_sample = 0
        loop do
        # Write your code here !!!
        # Do not use Process.exit (true) , exit () , abort ( ) in your code because it infers the death of the Daemon process

        @counter_sample += 1
        puts "Running "+ @command +" for " + @counter_sample.to_s + " time :)"

        # Wait in seconds before running your command again
        sleep(10)
      end
    end
  end

end

  FILE

  commands_dir = DAEMON_CONFIG['command_path']
  commands_dir = File.join(base, commands_dir)
  FileUtils.mkdir_p(commands_dir) unless File.directory?(commands_dir)

  command_file = File.join(commands_dir, 'command_sample.rb')
  File.open(command_file, 'wb') {|f| f.write(command_sample_content) } unless File.exists?(command_file)

  log_dir = "log"
  log_dir = File.join(base, log_dir)
  FileUtils.mkdir_p(log_dir) unless File.directory?(log_dir)

  pids_dir = File.join(base, "tmp/pids")
  pids_file = File.join(base, DAEMON_CONFIG['pids_file'])
  FileUtils.mkdir_p(pids_dir) unless File.directory?(pids_dir)
  File.open(pids_file, 'wb') {|f| f << "fcl_rails_daemon:" } unless File.exist?(pids_file)

  puts " ༼ つ ◕_◕ ༽つ OK... Gem has been set!!!    "
  exit
end

unless File.exist?(config_file)
  puts " ༼ つ ◕_◕ ༽つ OOOPS... Gem has not yet been set. To set run 'fcld --configure'    "
  exit
end

require 'fcl_rails_daemon'
require 'fcl_rails_daemon/version'

FclRailsDaemon::Manager.run(ARGV)